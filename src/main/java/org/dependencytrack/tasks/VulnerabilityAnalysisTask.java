/*
 * This file is part of Dependency-Track.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * Copyright (c) Steve Springett. All Rights Reserved.
 */
package org.dependencytrack.tasks;

import alpine.event.framework.Event;
import alpine.event.framework.Subscriber;
import com.github.packageurl.PackageURL;
import org.apache.commons.collections4.CollectionUtils;
import org.dependencytrack.event.InternalAnalysisEvent;
import org.dependencytrack.event.MetricsUpdateEvent;
import org.dependencytrack.event.NpmAuditAnalysisEvent;
import org.dependencytrack.event.OssIndexAnalysisEvent;
import org.dependencytrack.event.VulnDbAnalysisEvent;
import org.dependencytrack.event.VulnerabilityAnalysisEvent;
import org.dependencytrack.model.Component;
import org.dependencytrack.tasks.scanners.AnalyzerIdentity;
import org.dependencytrack.tasks.scanners.BaseComponentAnalyzerTask;
import org.dependencytrack.tasks.scanners.InternalAnalysisTask;
import org.dependencytrack.tasks.scanners.NpmAuditAnalysisTask;
import org.dependencytrack.tasks.scanners.OssIndexAnalysisTask;
import org.dependencytrack.tasks.scanners.VulnDbAnalysisTask;
import java.util.ArrayList;
import java.util.List;

public class VulnerabilityAnalysisTask extends BaseComponentAnalyzerTask implements Subscriber {

    private final List<Component> internalCandidates = new ArrayList<>();
    private final List<Component> npmCandidates = new ArrayList<>();
    private final List<Component> ossIndexCandidates = new ArrayList<>();
    private final List<Component> vulnDbCandidates = new ArrayList<>();

    public boolean shouldAnalyze(final PackageURL purl) {
        return true;
    }

    public AnalyzerIdentity getAnalyzerIdentity() {
        return AnalyzerIdentity.NONE;
    }

    /**
     * {@inheritDoc}
     */
    public void inform(final Event e) {
        if (e instanceof VulnerabilityAnalysisEvent) {
            final VulnerabilityAnalysisEvent event = (VulnerabilityAnalysisEvent)e;
            if (event.getComponents() != null && event.getComponents().size() > 0) {
                /*
                When this task is processing events that specify the components to scan,
                separate them out into 'candidates' so that we can fire off multiple events
                in hopes of perform parallel analysis using different analyzers.
                 */
                final InternalAnalysisTask internalAnalysisTask = new InternalAnalysisTask();
                final NpmAuditAnalysisTask npmAuditAnalysisTask = new NpmAuditAnalysisTask();
                final OssIndexAnalysisTask ossIndexAnalysisTask = new OssIndexAnalysisTask();
                final VulnDbAnalysisTask vulnDbAnalysisTask = new VulnDbAnalysisTask();
                for (final Component component: event.getComponents()) {
                    final PackageURL purl = component.getPurl();
                    if (internalAnalysisTask.shouldAnalyze(purl)) {
                        internalCandidates.add(component);
                    }
                    if (npmAuditAnalysisTask.shouldAnalyze(purl)) {
                        npmCandidates.add(component);
                    }
                    if (ossIndexAnalysisTask.shouldAnalyze(purl)) {
                        ossIndexCandidates.add(component);
                    }
                    if (vulnDbAnalysisTask.shouldAnalyze(purl)) {
                        vulnDbCandidates.add(component);
                    }
                }
                // Do not call individual async events when processing a known list of components.
                // Call each analyzer task sequentially and catch any exceptions as to prevent one analyzer
                // from interrupting the successful execution of all analyzers.
                if (CollectionUtils.isNotEmpty(internalCandidates)) {
                    try {
                        internalAnalysisTask.inform(new InternalAnalysisEvent(internalCandidates));
                    } catch (Exception ex) {

                    }
                }
                if (CollectionUtils.isNotEmpty(npmCandidates)) {
                    try {
                        npmAuditAnalysisTask.inform(new NpmAuditAnalysisEvent(npmCandidates));
                    } catch (Exception ex) {

                    }
                }
                if (CollectionUtils.isNotEmpty(ossIndexCandidates)) {
                    try {
                        ossIndexAnalysisTask.inform(new OssIndexAnalysisEvent(ossIndexCandidates));
                    } catch (Exception ex) {

                    }
                }
                if (CollectionUtils.isNotEmpty(vulnDbCandidates)) {
                    try {
                        vulnDbAnalysisTask.inform(new VulnDbAnalysisEvent(vulnDbCandidates));
                    } catch (Exception ex) {

                    }
                }
                if (event.getProject() != null) {
                    Event.dispatch(new MetricsUpdateEvent(event.getProject()));
                }
            } else {
                // Portfolio analysis
                Event.dispatch(new InternalAnalysisEvent());
                Event.dispatch(new NpmAuditAnalysisEvent());
                Event.dispatch(new OssIndexAnalysisEvent());
                Event.dispatch(new VulnDbAnalysisEvent());
            }
        }
    }

    /**
     * Unused.
     */
    public void analyze(final List<Component> components) {
    }

}
